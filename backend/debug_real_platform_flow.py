#!/usr/bin/env python3
"""
Script de debug pour simuler exactement le flux de la plateforme r√©elle
et identifier pourquoi les emails ne sont pas envoy√©s et email_sent reste false
"""

import os
import sys
import django
from datetime import datetime

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'coffee_meetings_platform.settings')
django.setup()

from django.contrib.auth.models import User
from django.core.mail import get_connection
from django.conf import settings
from matching.models import EmployeePair, CampaignMatchingCriteria
from matching.services import EmailNotificationService
from campaigns.models import Campaign
from employees.models import Employee
from matching.views import ConfirmPairsView
from rest_framework.test import APIRequestFactory
from rest_framework.test import force_authenticate

def test_email_backend_connection():
    """Test de la connexion au backend email"""
    print("üîç Test de la connexion au backend email...")
    
    try:
        connection = get_connection()
        print(f"‚úÖ Backend email: {settings.EMAIL_BACKEND}")
        print(f"‚úÖ Host: {getattr(settings, 'EMAIL_HOST', 'Non d√©fini')}")
        print(f"‚úÖ Port: {getattr(settings, 'EMAIL_PORT', 'Non d√©fini')}")
        print(f"‚úÖ From email: {getattr(settings, 'DEFAULT_FROM_EMAIL', 'Non d√©fini')}")
        
        # Test de connexion
        connection.open()
        print("‚úÖ Connexion email r√©ussie!")
        connection.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion email: {str(e)}")
        return False

def test_email_sending_directly():
    """Test d'envoi d'email direct avec Django"""
    print("\nüîç Test d'envoi d'email direct avec Django...")
    
    try:
        from django.core.mail import send_mail
        
        # Email de test
        result = send_mail(
            subject='Test Email - Coffee Meetings Platform',
            message='Ceci est un email de test pour v√©rifier la configuration.',
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=['test@example.com'],
            fail_silently=False,
        )
        
        print(f"‚úÖ Email envoy√© avec succ√®s! R√©sultat: {result}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'envoi d'email: {str(e)}")
        import traceback
        print(f"Traceback complet: {traceback.format_exc()}")
        return False

def test_email_notification_service():
    """Test du service EmailNotificationService"""
    print("\nüîç Test du service EmailNotificationService...")
    
    try:
        # Cr√©er un service
        email_service = EmailNotificationService()
        print(f"‚úÖ Service cr√©√© avec succ√®s")
        print(f"‚úÖ From email: {email_service.from_email}")
        
        # V√©rifier la configuration
        print(f"‚úÖ Backend configur√©: {settings.EMAIL_BACKEND}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur du service email: {str(e)}")
        import traceback
        print(f"Traceback complet: {traceback.format_exc()}")
        return False

def test_confirm_pairs_view_simulation():
    """Simulation de la vue ConfirmPairsView avec des donn√©es existantes"""
    print("\nüîç Simulation de la vue ConfirmPairsView...")
    
    try:
        # Utiliser des donn√©es existantes au lieu d'en cr√©er de nouvelles
        campaign = Campaign.objects.first()
        if not campaign:
            print("‚ùå Aucune campagne trouv√©e dans la base de donn√©es")
            return False
            
        print(f"‚úÖ Campagne trouv√©e: {campaign.id} - {campaign.title}")
        print(f"‚úÖ HR Manager: {campaign.hr_manager}")
        
        # Trouver des employ√©s existants
        employees = Employee.objects.filter(campaign=campaign)[:2]
        if len(employees) < 2:
            print("‚ùå Pas assez d'employ√©s dans cette campagne")
            return False
            
        emp1, emp2 = employees[0], employees[1]
        print(f"‚úÖ Employ√© 1: {emp1.id} - {emp1.name} ({emp1.email})")
        print(f"‚úÖ Employ√© 2: {emp2.id} - {emp2.name} ({emp2.email})")
        
        # V√©rifier si une paire existe d√©j√†
        existing_pair = EmployeePair.objects.filter(
            campaign=campaign,
            employee1=emp1,
            employee2=emp2
        ).first()
        
        if not existing_pair:
            # Cr√©er une nouvelle paire
            pair = EmployeePair.objects.create(
                campaign=campaign,
                employee1=emp1,
                employee2=emp2,
                created_by='debug_script'
            )
            print(f"‚úÖ Nouvelle paire cr√©√©e: {pair.id}")
        else:
            pair = existing_pair
            print(f"‚úÖ Paire existante trouv√©e: {pair.id}")
        
        print(f"‚úÖ √âtat initial email_sent: {pair.email_sent}")
        print(f"‚úÖ √âtat initial email_status: {pair.email_status}")
        
        # Simuler l'envoi d'email
        email_service = EmailNotificationService()
        result = email_service.send_pair_notifications([pair])
        
        print(f"‚úÖ R√©sultat envoi email: {result}")
        
        # Recharger la paire pour voir les changements
        pair.refresh_from_db()
        print(f"‚úÖ √âtat final email_sent: {pair.email_sent}")
        print(f"‚úÖ √âtat final email_status: {pair.email_status}")
        print(f"‚úÖ email_sent_at: {pair.email_sent_at}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur simulation ConfirmPairsView: {str(e)}")
        import traceback
        print(f"Traceback complet: {traceback.format_exc()}")
        return False

def test_serializer_exposure():
    """Test de l'exposition du champ email_sent par le serializer"""
    print("\nüîç Test de l'exposition du champ email_sent par le serializer...")
    
    try:
        from matching.serializers import EmployeePairSerializer
        
        # Cr√©er une paire de test
        campaign = Campaign.objects.first()
        if not campaign:
            print("‚ùå Aucune campagne trouv√©e pour le test")
            return False
            
        pair = EmployeePair.objects.filter(campaign=campaign).first()
        if not pair:
            print("‚ùå Aucune paire trouv√©e pour le test")
            return False
        
        # S√©rialiser la paire
        serializer = EmployeePairSerializer(pair)
        data = serializer.data
        
        print(f"‚úÖ Champs expos√©s par le serializer: {list(data.keys())}")
        
        if 'email_sent' in data:
            print(f"‚úÖ email_sent est expos√©: {data['email_sent']}")
        else:
            print(f"‚ùå email_sent n'est PAS expos√© par le serializer!")
            
        if 'email_status' in data:
            print(f"‚úÖ email_status est expos√©: {data['email_status']}")
        else:
            print(f"‚ùå email_status n'est PAS expos√© par le serializer!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test serializer: {str(e)}")
        import traceback
        print(f"Traceback complet: {traceback.format_exc()}")
        return False

def test_existing_pairs_email_status():
    """Test du statut email des paires existantes"""
    print("\nüîç Test du statut email des paires existantes...")
    
    try:
        # Trouver toutes les paires
        all_pairs = EmployeePair.objects.all()
        print(f"‚úÖ Total des paires trouv√©es: {all_pairs.count()}")
        
        if all_pairs.count() == 0:
            print("‚ùå Aucune paire trouv√©e dans la base de donn√©es")
            return False
        
        # Analyser le statut des emails
        email_status_counts = {}
        email_sent_counts = {'True': 0, 'False': 0}
        
        for pair in all_pairs:
            # Compter par email_status
            status = pair.email_status
            email_status_counts[status] = email_status_counts.get(status, 0) + 1
            
            # Compter par email_sent
            sent = str(pair.email_sent)
            email_sent_counts[sent] = email_sent_counts.get(sent, 0) + 1
        
        print(f"‚úÖ R√©partition par email_status: {email_status_counts}")
        print(f"‚úÖ R√©partition par email_sent: {email_sent_counts}")
        
        # V√©rifier la coh√©rence
        inconsistent_pairs = []
        for pair in all_pairs:
            if pair.email_status == 'sent' and not pair.email_sent:
                inconsistent_pairs.append(f"Paire {pair.id}: status='sent' mais email_sent=False")
            elif pair.email_status == 'pending' and pair.email_sent:
                inconsistent_pairs.append(f"Paire {pair.id}: status='pending' mais email_sent=True")
        
        if inconsistent_pairs:
            print(f"‚ö†Ô∏è Paires incoh√©rentes trouv√©es:")
            for msg in inconsistent_pairs:
                print(f"   - {msg}")
        else:
            print("‚úÖ Toutes les paires sont coh√©rentes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test statut existant: {str(e)}")
        import traceback
        print(f"Traceback complet: {traceback.format_exc()}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√©but du debug complet de la plateforme r√©elle")
    print("=" * 60)
    
    # Test 1: Connexion email
    email_connection_ok = test_email_backend_connection()
    
    # Test 2: Envoi direct d'email
    if email_connection_ok:
        email_sending_ok = test_email_sending_directly()
    else:
        email_sending_ok = False
    
    # Test 3: Service de notification
    service_ok = test_email_notification_service()
    
    # Test 4: Simulation de la vue
    view_simulation_ok = test_confirm_pairs_view_simulation()
    
    # Test 5: Serializer
    serializer_ok = test_serializer_exposure()
    
    # Test 6: Statut des paires existantes
    existing_status_ok = test_existing_pairs_email_status()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    print(f"üîå Connexion email: {'‚úÖ OK' if email_connection_ok else '‚ùå √âCHEC'}")
    print(f"üìß Envoi email direct: {'‚úÖ OK' if email_sending_ok else '‚ùå √âCHEC'}")
    print(f"üîß Service notification: {'‚úÖ OK' if service_ok else '‚ùå √âCHEC'}")
    print(f"üåê Simulation vue: {'‚úÖ OK' if view_simulation_ok else '‚ùå √âCHEC'}")
    print(f"üìù Serializer: {'‚úÖ OK' if serializer_ok else '‚ùå √âCHEC'}")
    print(f"üìä Statut existant: {'‚úÖ OK' if existing_status_ok else '‚ùå √âCHEC'}")
    
    if all([email_connection_ok, email_sending_ok, service_ok, view_simulation_ok, serializer_ok, existing_status_ok]):
        print("\nüéâ Tous les tests sont pass√©s! Le probl√®me doit √™tre ailleurs...")
        print("üí° Suggestions:")
        print("   - V√©rifier les logs de la plateforme r√©elle")
        print("   - V√©rifier les variables d'environnement")
        print("   - V√©rifier les permissions de base de donn√©es")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

if __name__ == '__main__':
    main()
